HW2, #7: After-action Report

I wasn't able to figure out make_parser, so I don't have much to say 
about my approach. Instead, I can briefly describe my implementation
of the warm up functions and make_matcher. For warm up 1 convert_grammar,
I aproached it in by separating the grammar into the start symbol and 
list of rules and then calling a helper function to parse through the 
input and recursively get all valid rules for the nonterminals by 
concatenating each sublist until everything was parsed. For warm up 2, 
I converted the tree to a list and then called a recursive helper function 
to go through the tree by each node and into each subtree from left to right, 
concatenating and stopping at nodes with no children, and finally stopping 
when there were no more nodes to parse. For make_matcher, I implemented 
it with mutually recursive helper functions. I separated the elements of 
the grammar to call the helper function with the grammar function, list 
of rules, acceptor, and fragment; matching the list of rules by 
calling the other function to parse the current rule; and returning None 
to backtrack, a curried function to continue recursing, or Some found value.

One weakness in make_matcher, which would also be present in make_parser,
is that it can't handle left recursion. In the case that a rule has a
leftmost symbol that can be expanded into its nontermial, the make_matcher
would infinitely loop since I didn't include a way to safeguard against
infinitely parsing the same nonterminals. 
